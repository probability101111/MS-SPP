# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YG_pRWH_Fq_7EGGudKqeBqr9gxWb7UNN
"""

pip install yfinance

import yfinance as yf
from datetime import datetime
end=datetime.now()
start=datetime(end.year-10,end.month,end.day)

stock='MSFT'
msft_data=yf.download(stock,start,end)

msft_data.head()

msft_data.shape

msft_data.describe

msft_data.isna()#to check if there are any null value in dataset

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

plt.figure(figsize=(15,5))
msft_data['Adj Close'].plot()
plt.xlabel('years')
plt.ylabel('Adj Close')
plt.title('Closing price of msft data')

def plot_graph(figsize,values):
    plt.figure(figsize=figsize)
    values.plot()
    plt.xlabel('years')
    plt.ylabel(column_name)
    plt.title(f"(column_name)of Microsoft data")

msft_data.columns

for column in msft_data.columns:
    plt.figure(figsize=(15, 5))  # Set the figure size
    plt.plot(msft_data[column])  # Plot the specific column
    plt.title(column)  # Set title as the column name
    plt.xlabel("Date")  # Label for x-axis
    plt.ylabel("Value")  # Label for y-axis
    plt.show()  # Display the plot

temp_data=[10,20,30,40,50,60,70,80,90,100]
print(sum(temp_data[1:6])/5)

import pandas as pd
data=pd.DataFrame([10,20,30,40,50,60,70,80,90,100])
data.head()

data.rolling(5).mean()

for i in range(2014,2024):
    print(i,list(msft_data.index.year).count(i))

msft_data["MA_FOR_250_DAYS"]=msft_data['Adj Close'].rolling(250).mean()

msft_data["MA_FOR_250_DAYS"][0:250].tail()

plot_graph((15,5),msft_data["MA_FOR_250_DAYS"],)

plot_graph((15,5),msft_data[['Adj Close',"MA_FOR_250_DAYS"]],)

msft_data["MA_FOR_250_DAYS"]=msft_data['Adj Close'].rolling(100).mean()
plot_graph((15,5),msft_data[['Adj Close',"MA_FOR_250_DAYS"]],)

msft_data['MA_FOR_100_DAYS'] = msft_data['Adj Close'].rolling(window=100).mean()


# Now plot the data
plt.figure(figsize=(15, 5))
plt.plot(msft_data['Adj Close'], label='Adj Close')
plt.plot(msft_data['MA_FOR_100_DAYS'], label='MA for 100 Days')
plt.title('MSFT Stock Data with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

plt.figure(figsize=(15, 5))  # Set the figure size

# Plot the three columns
plt.plot(msft_data['Adj Close'], label='Adj Close')
plt.plot(msft_data['MA_FOR_100_DAYS'], label='MA for 100 Days')
plt.plot(msft_data['MA_FOR_250_DAYS'], label='MA for 250 Days')

# Add title and labels
plt.title('MSFT Stock Data with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price')

# Add legend to differentiate between the lines
plt.legend()

# Display the plot
plt.show()

msft_data['percentage_change_cp']=msft_data['Adj Close'].pct_change()
msft_data[['Adj Close', 'percentage_change_cp']].head()

plot_graph((15,5),msft_data['percentage_change_cp'],)

stock = 'MSFT'
start = '2014-02-1'  # Replace with your start date
end = '2024-09-18'    # Replace with your end date

# Download the data
msft_data = yf.download(stock, start=start, end=end)

# Check the downloaded data
print("First few rows of msft_data:\n", msft_data.head())
print("Columns in msft_data:", msft_data.columns)

# Extract the adjusted close price
Adj_close_price = msft_data[['Adj Close']]

# Check the size of Adj_close_price
print("Length of Adj_close_price:", len(Adj_close_price))

# Initialize the scaler
scaler = MinMaxScaler(feature_range=(0, 1))

# Fit and transform the data
scaled_data = scaler.fit_transform(Adj_close_price)

# Check the scaled data
print("Scaled data sample:\n", scaled_data[:10])
print("Length of scaled_data:", len(scaled_data))

x_data = []
y_data = []

for i in range(100, len(scaled_data)):
    x_data.append(scaled_data[i-100:i])
    y_data.append(scaled_data[i])

import numpy as np
x_data, y_data = np.array(x_data), np.array(y_data)

x_data[0],y_data[0]

int(len(x_data)*0.7)

2674-100-int(len(x_data)*0.7)#2674=len(scaled_data)

splitting_len=int(len(x_data)*0.7)
x_train=x_data[:splitting_len]
y_train=y_data[:splitting_len]

x_test=x_data[splitting_len:]
y_test=y_data[splitting_len:]

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

from keras.models import Sequential
from keras.layers import Dense, LSTM

model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(64,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x_train, y_train, batch_size=1, epochs = 2)

model.summary()

predictions = model.predict(x_test)

predictions

inv_predictions = scaler.inverse_transform(predictions)
inv_predictions

inv_y_test = scaler.inverse_transform(y_test)
inv_y_test

rmse = np.sqrt(np.mean( (inv_predictions - inv_y_test)**2))

rmse

ploting_data = pd.DataFrame(
 {
  'original_test_data': inv_y_test.reshape(-1),
    'predictions': inv_predictions.reshape(-1)
 } ,
    index = msft_data.index[splitting_len+100:]
)
ploting_data.head()

plot_graph((15,6), ploting_data, )

plot_graph((15,6), pd.concat([Adj_close_price[:splitting_len+100],ploting_data], axis=0), )

model.save("Latest_stock_price_model.keras")



